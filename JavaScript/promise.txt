                                Synchronous         |               Asynchronous
                                    동기                              비동기
                                순차적                              각자 자신의 시간에 맞춰 실행
                                실행파악 쉬움                        실행이 혼란 스러움 그러나 빠른속도로 실행


console.log(1);
console.log(2);
console.log(3);
console.log(4);

위의 코드는 1, 2, 3, 4 순차적으로 실행, 앞의 명령이 끝나면 뒤의 명령이 실행 => Synchronous하다 => 동기적으로 실행된다

console.log(1);
console.log(2);
setTimeout(function(){console.log(3)}, 5000);
console.log(4);

setTimeout 함수는 5초 후에 첫번째 파라미터로 전달된 인자인 콜백함수를 실행
1, 2, 4 그리고 5초후에 3이 출력
1, 2, 5초기다리고 3, 그리고 4 가 출력 된 것이 아니다 => 병렬적으로 진행 => Asynchronous


fetch API

AJAX란 무엇일까?

AJAX는 (Asynchronous Javascript And XML, 비동기적 자바스크립트와 XML)의 약자로 XMLHttpRequest(XHR)과 Javascript와 DOM을 이용하여 서버에서 추가 정보를 비동기적으로 가져올 수 있게 해주는 포괄적인 기술을 나타내는 용어다. 하지만 만들어진지 오래되었고 jQuery와 보다 쓰기 쉬운 표준 API가 등장했다. 별도의 라이브러리 대신 최신 브라우저에서 모두 내장되어있는 함수이며 사용이 쉽고 Promise 값을 반환하는 fetch API이다.


fetch API는 다양한 주문 전송, 사용자 정보 읽기, 서버에서 최신 변경분 가져오기 등등 다양한 일을 페이지 새로고침 없이 수행한다.

promise사용하는 이유
비동기적인 작업을 처리할 때 그 작업이 성공, 실패했는지 표준화된 방식을 기용해서 처리해준다
성공 = then(함수)
실패 = catch(함수)

---------------------------------------------------------------------------------------------

## 내가만든 프로미스 (위에는 남이 만든 프로미스)

function job1(){
        return new Promise(function(resolve, reject){
        setTimeout(function(){
            resolve('job1 ok!');
        }, 2000);
    });
}


성공했는지 실패했는지에 대한 콜백함수 공급(resolve와 reject라고 관습적으로 많이씀 다른이름이여도 상관은없음)


function job2(){
        return new Promise(function(resolve, reject){
        setTimeout(function(){
            resolve('job2 ok!');
        }, 2000);
    });
}


// then 안에 또 then (Nested 방식)

job1().then(function(data){
    console.log('data1', data);
    job2().then(function(data){
        console.log('data2', data)
    })
})

// 체이닝 방식
job1()
    .then(function(data){
        console.log('data1', data);
        return job2();
        // job2는 프로미스를 리턴하니 then사용이 가능
    })
    .then(function(data){
         console.log('data2', data);
    })