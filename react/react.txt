====================================================================

2023-01-28 복습

====================================================================
css-in-js

styled-components 인스톨


css가 중복되는부분들(display:flex, align-items: center, justify-content: center)은 styles/common.js에 관리,
전역에는 global.js, 테마는 theme.js



js에서 css스타일을 줄수가있다.
주는 방법은

const 변수명 = styled.태그이름(div,header 등등...)`
    css 내용들...
    ex) display: flex,
    ...
`;

그리고 태그에 저변수명으로 감싸준다
<변수명>
    <>
    <>
    ...
</변수명>

=================================

const global = createGlobalStyle``;
createGlobalStyle을 통해 만들고, App.js의 Routes위에 태그를 줌(정확하게 왜 Routes위에 주는지는 모르곘음 아직)


=================================

theme

각각맞는 테마들을 정의(색상, 폰트 굵기, 사이즈 등등..)
이를 객체로 만들어 


<ThemeProvider theme={theme}>로 브라우저라우터를 감싸준다

이때 프로퍼티값으로 theme으로 해주어야한다 {}안의 값은 내가 지정한 객체

이를 사용할때는 스타일컴포넌트에가서 ${콜백함수} 로받는데,
${(props)=>props.theme....} 이런식으로 받아도 되고 구조분해할당 활용도 가능
${({theme})=> theme...}


====================================================================

2023-01-29 복습

====================================================================

어제의 연장선, 현재는 리엑트의 퍼블리싱을 진행중이다.

계속사용되는 컴포넌트는 src이하 components를 만들어 따로 만들어 관리
이때 styles/common에 해주지 않는 이유는 common은 공용적으로 사용되는 부분을 다뤄주는데
이 성질을 바꾸지 않게 하기위함이다.

컴포넌트를 쪼갤수록 폴더가 굉장히 많아지기 때문에 풀더 구조에 대해서도 잘 이해하고 있을 필요가 있다


====================================================================

2023-03-12

====================================================================

access_token, refresh토큰을 활용한 로그인 로직 
    - 전체적인 흐름은 이해가 가지만 스스로 구현하기에는 아직 생각이 닿지 않는 부분들도 있다. 하나씩 짚어보자
eslint, prettier, husky
    - 개발향상에 도움을 주는 친구들, 사용법은 수업시간 참고, 다른 예시들도 찾아보기
redux-toolkit
    - 사용법이 익숙치 않아 원본문서, 예시 찾아보면서 수업내용 이해하기


====================================================================

2023-03-13

====================================================================

강의 다시 들으면서 axiostodo, rtk복습! 