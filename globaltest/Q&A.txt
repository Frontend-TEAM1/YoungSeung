

1. FLUX 패턴에 대하여 설명해보세요
    MVC모델의 한계 때문에 등장
    MVC는 백엔드에서 많이 사용된다
    백엔드에서의 수행절차
    1. client(브라우저 혹은 모바일 앱)의 REQUEST를 보냄(어떤 정보를 주세요)
    2. request를 분석(Routing)
    3. 필요한 데이터를 수집/가공
    4. 데이터를 기반으로 view를 생성(클라이언트에 줄 웹 page)

    request     =>      데이터 수집/가공        =>      뷰 생성     => 결과 응답
    Controller              Model                       View            Controller

    의존성이 강하다! (각각 전,후의 레이어의 존재를 알아야한다)

    front-end에서 View는 사건의 발생지(?)이다. 즉 온갖 이벤트!!가 발생한다.
    사용자입력값, 화면선택,변경, 서버와 통신 등등...
    이런 특성을 Model과 View 관계로 정리하면..

    View    =>      Model
    뷰의 변경으로   모델을 바꿔야 되는 경우가 있고  ex) 사용자 입력 값

    View    <=      Model
    모델의 변경 즉 서버로 받은 데이터 또는 어떤 주기적으로 데이터를 생성하는 일이 생긴다거나 할 경우
    view를 바꿔야 되는 경우도 있다

    그러면? 뷰와 모델이 양쪽으로 복잡한 관계가 될 수 있다!(양방향)
    이럴 경우 복잡도가 올라간다! 근데?? 뷰는 아주 많다!! 그래서 우리는 view를 잘게 나눈다
    근데? 뷰가 엄청 많고 다수의 모델이 존재한다면?? 서로간의 의존성이 많아지고 복잡도가 훨씬 더 올라간다.
    어디서 어디로 호출하는지 혼란스럽다!!
    이를 해결하기위해 엄청난 컨트롤러가 생기고 view간의 계층처리가 필요하다(잦은 리렌더링을 최소화 하기위해서)
    
    그래서 우리에게 필요한 것은 복잡한 view,model관계의 단순화 , view간의 계층처리로 쉽고 효율적인 DOM 처리 등이 필요하다

    이 문제들을 처리하기위해 MVVM, FLUX등이 존재하게 된다!
    FLUX : 한 방향으로 흐름을 제어하며 동작한다!!!!!!!!!!!!!!!!!!!!!!!!

    뷰에서 어떤 변경 사항이 생기면 어떤 이벤트를 발생시키고(dispatch) 이를 통해 스토어에 전달하고
    -> 스토어의 변경 사항이 있다면 view로 바뀐다.

    action -> dispatch -> store -> view 

    action : 변경할 데이터 객체, dispatcher를 통해 store에 전달 / dispatcher의 묶음
    dispatcher : 데이터의 흐름을 관리 해준다. store로 전달
    store : 상태의 저장소, 상태를 변경할 수 있는 함수를 가지고 있다. 어떤 액션이냐에 따라 함수를 적용하여 상태 변경(dispatcher를 거쳐옴)
    view : 홤면

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
        - 상태를 변경하는 로직을 컴포넌트에서 분리시킨다. 이로인해 재사용성이 용이해지며 가독성이 증가한다.
    (2) useContext
        - 전역으로 state를 관리 해줄 경우에 사용
            

3. 전역 상태 관리를 해야하는 이유는 무엇일까요
    - 프로젝트의 규모가 커질수록 하위 컴포넌트로 props를 통해
        전달하게 되는 깊이가 깊어지고, 이로인해 에러추적이 힘들어지고
        어디에 어떤 스테이트가있는지 출처확인이 어려워진다

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요

   장점
        - 유지보수가 용이하다(전역으로 관리해주기 때문에 이곳저곳 찾아볼 필요가 없다)
    
    단점
        - 어쨋든 전역 상태관리도 자원을 잡아먹는다
